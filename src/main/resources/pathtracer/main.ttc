include "../std/image.ttc"
include "../std/std.ttc"

include "color.ttc"
include "hittable.ttc"
include "hittable_list.ttc"
include "ray.ttc"
include "sphere.ttc"
include "vec3.ttc"

def infinity = 1 / 0
def pi = 3.1415926535897932385

def degrees_to_radians(degrees) = degrees * pi / 180

def ray_color(r, world) = (
    def rec = {}
    if [hittable_hit(world, r, 0, infinity, rec)] (
        vec3_1mul(0.5, vec3_add(rec.normal, vec3(1, 1, 1)))
    )
    else (
        def unit_direction = vec3_unit_vector(r.direction)
        def a = 0.5 * (unit_direction[1] + 1)
        vec3_add(vec3_1mul(1 - a, vec3(1, 1, 1)), vec3_1mul(a, vec3(0.5, 0.7, 1.0)))
    )
)

def main(?) = (

    def aspect_ratio = 16 / 9
    def image_width = 400

    def image_height = floor(image_width / aspect_ratio)
    image_height = if [image_height < 1] 1 else image_height

    def image = imgCreate(image_width, image_height)

    def world = hittable_list()

    hittable_list_add(world, sphere(vec3(0, 0, -1), 0.5))
    hittable_list_add(world, sphere(vec3(0, -100.5, -1), 100))

    def focal_length = 1
    def viewport_height = 2
    def viewport_width = viewport_height * image_width / image_height
    def camera_center = vec3(0, 0, 0)

    def viewport_u = vec3(viewport_width, 0, 0)
    def viewport_v = vec3(0, -viewport_height, 0)

    def pixel_delta_u = vec3_div1(viewport_u, image_width)
    def pixel_delta_v = vec3_div1(viewport_v, image_height)

    def viewport_upper_left = vec3_sub(vec3_sub(vec3_sub(camera_center, vec3(0, 0, focal_length)), vec3_div1(viewport_u, 2)), vec3_div1(viewport_v, 2))
    def pixel00_loc = vec3_add(viewport_upper_left, vec3_1mul(0.5, vec3_add(pixel_delta_u, pixel_delta_v)))

    for [0, image_height] -> j (
        printf("\rScanlines remaining: %5.0f", image_height - j)
        for [0, image_width] -> i (
            def pixel_center = vec3_add(vec3_add(pixel00_loc, vec3_1mul(i, pixel_delta_u)), vec3_1mul(j, pixel_delta_v))
            def ray_direction = vec3_sub(pixel_center, camera_center)
            def r = ray(camera_center, ray_direction)

            def pixel_color = ray_color(r, world)
            imgSetPixel(image, i, j, color_int(pixel_color))
        )
    )

    printf("\rWriting image...          ")
    imgWrite("out.ppm", image)
    printf("\rDone.           %n")

    0
)
